{
    "collab_server" : "",
    "contents" : "#' Selección de la mejor predicción de un conjunto de modelos de series temporales.\n#'\n#' \\code{BestTSPred} Selecciona la mejor predicción para una serie de tiempo de\n#' entre las proporcionadas por un conjunto de modelos.\n#'\n#' Este método toma como argumento de entrada el objeto \\code{x} que contiene las\n#' variables que queremos predecir y selecciona la mejor predicción de entre un\n#' conjunto de predicciones especificadas como input en el objeto de clase\n#' \\linkS4class{BestTSPredParam}. Este parámetro contiene los diferentes modelos\n#' de predicción de series temporales que generan las distintas predicciones.\n#'\n#'\n#' @param x \\code{vector}, \\code{matrix} u objeto de clase \\code{StQList}, con las variables y los\n#' valores para los que obtenemos las predicciones.\n#'\n#' @param BestTSPredParam Objeto de clase \\linkS4class{BestTSPredParam} con los parámetros\n#' de los distintos modelos de predicción de series temporales con los que se generan\n#' las diferentes predicciones y las variables sobre las que se calculan.\n#'\n#' @return Lista con componentes \\code{Pred} y \\code{STD} que contienen\n#' la mejor predicción de entre las especificadas en el objeto de entrada\n#' \\code{BestTSPredParam}, y sus correspondientes desviaciones típicas estimadas,\n#' respectivamente.\n#'\n#' \\itemize{\n#'  \\item For input class vector, it returns numeric vectors.\n#'  \\item For input class matrix, it returns matrices.\n#'  \\item For input class StQList, it returns list whose components are\n#'   data.tables.\n#' }\n#'\n#' @examples\n#'\n#' # Predicting one and two months ahead in time\n#' data(Example1.TS)\n#' TS.list <- list(Reg = list('RegDiffTSPred', forward = 2L),\n#'                 Stat = list('StatDiffTSPred', forward = 2L),\n#'                 StatReg = list('StatRegDiffTSPred', forward = 2L))\n#' BestTSPredParam <- new(Class='BestTSPredParam', TSPred.list = TS.list)\n#' BestTSPred(Example1.TS, BestTSPredParam)\n#'\n#' \\dontrun{\n#' # With an object of class StQList\n#' data(StQListExample)\n#' VarNames <- c('ActivEcono_35._6._2.1.4._0', 'GeoLoc_35._6._2.1._1.2.5.')\n#' StQList <- readRDS('../E30183.FF.StQList.rds')\n#' Units <- StQ::getUnits(StQList[['MM102016']])\n#' Units <- Units[sample(1:(dim(Units)[1]), 1000)]\n#' data.table::setkeyv(Units, 'NOrden')\n#' StQ::setUnits(StQList) <- Units\n#' VarNames <- c('CifraNeg_13.___', 'Personal_07.__1._1._')\n#' TS.list <- list(Reg = list('RegDiffTSPred', forward = 2L),\n#'                 Stat = list('StatDiffTSPred', forward = 2L),\n#'                 StatReg = list('StatRegDiffTSPred', forward = 2L),\n#'                 Arima = list('AutoArimaTSPred', forward = 2L))\n#' BestTSPredParam <- new(Class='BestTSPredParam', TSPred.list = TS.list, VarNames = VarNames)\n#' BestTSPred(StQListExample, BestTSPredParam)\n#' }\n#'\n#' @import data.table RepoTime  StQ TSPred\n#'\n#' @include BestTSPredParam-class.R\n#'\n#' @export\nsetGeneric(\"BestTSPred\", function(x, BestTSPredParam){standardGeneric(\"BestTSPred\")})\n\n#' @rdname BestTSPred\n#'\n#' @export\nsetGeneric(\"BestTSPred\", function(x, BestTSPredParam){standardGeneric(\"BestTSPred\")})\n\n#' @rdname BestTSPred\n#'\n#' @export\nsetMethod(\n  f = \"BestTSPred\",\n  signature = c(\"vector\"),\n  function(x, BestTSPredParam){\n\n    Results.List <- list()\n    STD <- c()\n    for (TSPred in seq(along = BestTSPredParam@TSPred.list)){\n\n      Function <- BestTSPredParam@TSPred.list[[TSPred]][[1L]]\n      Param.List <- list()\n      Param.List[['x']] <- x\n      if (length(BestTSPredParam@TSPred.list[[TSPred]]) >= 2) Param.List <- c(Param.List, BestTSPredParam@TSPred.list[[TSPred]][-1])\n      Results.List[[TSPred]] <- do.call(Function, Param.List)\n      STD <- c(STD, Results.List[[TSPred]][['STD']])\n\n    }\n\n    if (all(is.na(STD))) return(list(Pred = as.numeric(NA), STD = as.numeric(NA)))\n    MinSTD.index <- which.min(STD)\n\n    output <- Results.List[[MinSTD.index]]\n\n    return(output)\n  }\n)\n#' @rdname BestTSPred\n#'\n#' @export\nsetMethod(\n  f = \"BestTSPred\",\n  signature = c(\"StQList\"),\n  function(x, BestTSPredParam){\n\n    VarNames <- BestTSPredParam@VarNames\n\n    if (length(VarNames) == 0){\n\n      stop('[BestTSPred StQList] Slot VarNames in the parameter BestTSPredParam must be specified.')\n    }\n\n    if (length(VarNames) == 1){\n\n      DT <- getValues(x, VarNames)\n      IDQuals <- setdiff(names(DT), c(VarNames, 'Period'))\n      DT[, orderPeriod := orderRepoTime(Period), by = IDQuals]\n      setkeyv(DT, c(IDQuals, 'orderPeriod'))\n      output <- DT[, BestTSPred(get(VarNames), BestTSPredParam = BestTSPredParam), by = IDQuals]\n      setnames(output, c('Pred', 'STD'), paste0(c('Pred', 'STD'), VarNames))\n      return(output)\n\n    } else {\n\n      DT.list <- lapply(VarNames, function(Var){\n\n        LocalOutput <- getValues(x, Var)\n        setnames(LocalOutput, Var, 'Value')\n        LocalOutput[, Variable := Var]\n        return(LocalOutput)\n      })\n\n      DT <- rbindlist(DT.list)\n      IDQuals <- setdiff(names(DT), c('Variable', 'Period', 'Value'))\n      DT[, orderPeriod := orderRepoTime(Period), by = IDQuals]\n      setkeyv(DT, c(IDQuals, 'Variable', 'orderPeriod'))\n      output <- DT[, BestTSPred(Value, BestTSPredParam = BestTSPredParam), by = c(IDQuals, 'Variable')]\n      Form <- paste0(IDQuals, ' ~ Variable')\n      output.Pred <- dcast(output, as.formula(Form), value.var = 'Pred')\n      setnames(output.Pred, VarNames, paste0('Pred', VarNames))\n      output.STD <- dcast(output, as.formula(Form), value.var = 'STD')\n      setnames(output.STD, VarNames, paste0('STD', VarNames))\n      output <- merge(output.Pred, output.STD, by = IDQuals, all = TRUE)\n      return(output)\n    }\n\n  }\n)\n",
    "created" : 1490201940245.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "891762808",
    "id" : "9507A808",
    "lastKnownWriteTime" : 1490201921,
    "last_content_update" : 1490201921,
    "path" : "~/INE.Packages.v2/BestTSPred/R/BestTSPred.R",
    "project_path" : "R/BestTSPred.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}